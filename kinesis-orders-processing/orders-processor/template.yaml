AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  orders-processor
  Sample SAM Template for orders-processor

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Resources:
  OrdersStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: OrdersStream
      ShardCount: 1
  OrdersDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamEncryptionConfigurationInput:
        DeliveryStreamEncryptionConfigurationInput
      DeliveryStreamName: OrdersHoseStream
      DeliveryStreamType: String

#      KinesisStreamSourceConfiguration:
#        KinesisStreamSourceConfiguration
#      RedshiftDestinationConfiguration:
#        RedshiftDestinationConfiguration
      S3DestinationConfiguration:
        S3DestinationConfiguration



  OrdersDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: Jobs
      AttributeDefinitions:
        - AttributeName: CustomerID
          AttributeType: S
        - AttributeName: OrderID
          AttributeType: S
      KeySchema:
        - AttributeName: CustomerID
          KeyType: HASH
        - AttributeName: OrderID
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  OrdersProcessingFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: OrdersProcessingFunction
      CodeUri: process-orders-lambda/
      Handler: app.lambda_handler
      Runtime: python3.7
      Events:
        HelloWorld:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /hello
            Method: get



#  S3Bucket:
#    Type: AWS::S3::Bucket
#    Properties:
#      AccessControl: PublicRead
#      BucketName: cf-test-bucket-1
#      NotificationConfiguration:
#        LambdaConfigurations:
#          - Event: "s3:ObjectCreated:*"
#            Function: aws:arn:lambda:test:testfunc
#        QueueConfigurations:
#          - Event: "s3:ObjectDeleted:*"
#            Queue: aws:arn:sqs:test:testqueue
#            Filter:
#              S3Key:
#                S3KeyFilter:
#                  Rules:
#                    - { Name: name1, Value: value1 }
#                    - { Name: name2, Value: value2 }
#      Tags:
#        - Key: foobar
#          Value:
#            Ref: SQSQueue
#  SQSQueue:
#    Type: AWS::SQS::Queue
#    Properties:
#      QueueName: cf-test-queue-1
#      Tags:
#        - Key: key1
#          Value: value1
#        - Key: key2
#          Value: value2
#  SNSTopic:
#    Type: AWS::SNS::Topic
#    Properties:
#      TopicName: { "Fn::Join": [ "", [ { "Ref": "AWS::StackName" }, "-test-topic-1-1" ] ] }
#      Tags:
#        - Key: foo
#          Value:
#            Ref: S3Bucket
#        - Key: bar
#          Value: { "Fn::GetAtt": [ "S3Bucket", "Arn" ] }
#  TopicSubscription:
#    Type: AWS::SNS::Subscription
#    Properties:
#      Protocol: sqs
#      TopicArn: !Ref SNSTopic
#      Endpoint: !GetAtt SQSQueue.QueueArn
#      FilterPolicy:
#        eventType:
#          - created
#  KinesisStream:
#    Type: AWS::Kinesis::Stream
#    Properties:
#      Name: cf-test-stream-1
#  SQSQueueNoNameProperty:
#    Type: AWS::SQS::Queue
#  TestParam:
#    Type: AWS::SSM::Parameter
#    Properties:
#      Name: cf-test-param-1
#      Description: test param 1
#      Type: String
#      Value: value123
#      Tags:
#        tag1: value1
#  ApiGatewayRestApi:
#    Type: AWS::ApiGateway::RestApi
#    Properties:
#      Name: test-api
#  GatewayResponseUnauthorized:
#    Type: AWS::ApiGateway::GatewayResponse
#    Properties:
#      RestApiId:
#        Ref: ApiGatewayRestApi
#      ResponseType: UNAUTHORIZED
#      ResponseTemplates:
#        application/json: '{"errors":[{"message":"Custom text!", "extra":"Some extra info"}]}'
#  GatewayResponseDefault500:
#    Type: AWS::ApiGateway::GatewayResponse
#    Properties:
#      RestApiId:
#        Ref: ApiGatewayRestApi
#      ResponseType: DEFAULT_5XX
#      ResponseTemplates:
#        application/json: '{"errors":[{"message":$context.error.messageString}]}'






##
